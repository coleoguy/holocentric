#191:200
dat$species <- c(rep("picta", 50),
rep("trivittata", 73),
rep("femoralis", 67),
rep("unknown", 10))
start <- c(1,51,124,191)
ends <- c(50,123,190,200)
means <- runif(n=10, min=10, max=50)
seps <- c(5,15,-2,5)
for(i in 1:4){
for(j in 1:10){
hits <- start[i]:ends[i]
dat[hits, j] <-
round(rnorm(n=length(hits), mean=(means[j]+seps[i]), sd=(means[j]/7)),digits=1)
}
}
fit <- prcomp(dat[,1:10])
plot(fit$x[,2]~fit$x[,1], col=c(rep("red", 50),
rep("blue", 73),
rep("green", 67),
rep("black", 10)))
dat <- as.data.frame(matrix(NA,200,11))
colnames(dat) <- c(paste("var",1:10,sep=""), "species")
#1:50
#51:123
#124:190
#191:200
dat$species <- c(rep("picta", 50),
rep("trivittata", 73),
rep("femoralis", 67),
rep("unknown", 10))
start <- c(1,51,124,191)
ends <- c(50,123,190,200)
means <- runif(n=10, min=10, max=50)
seps <- c(5,15,-2,5)
for(i in 1:4){
for(j in 1:10){
hits <- start[i]:ends[i]
dat[hits, j] <-
round(rnorm(n=length(hits), mean=(means[j]+seps[i]), sd=(means[j]/7)),digits=1)
}
}
fit <- prcomp(dat[,1:10])
plot(fit$x[,2]~fit$x[,1], col=c(rep("red", 50),
rep("blue", 73),
rep("green", 67),
rep("black", 10)))
dat <- as.data.frame(matrix(NA,200,11))
colnames(dat) <- c(paste("var",1:10,sep=""), "species")
#1:50
#51:123
#124:190
#191:200
dat$species <- c(rep("picta", 50),
rep("trivittata", 73),
rep("femoralis", 67),
rep("unknown", 10))
start <- c(1,51,124,191)
ends <- c(50,123,190,200)
means <- runif(n=10, min=10, max=50)
seps <- c(5,15,-2,5)
for(i in 1:4){
for(j in 1:10){
hits <- start[i]:ends[i]
dat[hits, j] <-
round(rnorm(n=length(hits), mean=(means[j]+seps[i]), sd=(means[j]/7)),digits=1)
}
}
fit <- prcomp(dat[,1:10])
plot(fit$x[,2]~fit$x[,1], col=c(rep("red", 50),
rep("blue", 73),
rep("green", 67),
rep("black", 10)))
dat <- as.data.frame(matrix(NA,200,11))
colnames(dat) <- c(paste("var",1:10,sep=""), "species")
#1:50
#51:123
#124:190
#191:200
dat$species <- c(rep("picta", 50),
rep("trivittata", 73),
rep("femoralis", 67),
rep("unknown", 10))
start <- c(1,51,124,191)
ends <- c(50,123,190,200)
means <- runif(n=10, min=10, max=50)
seps <- c(5,15,-2,5)
for(i in 1:4){
for(j in 1:10){
hits <- start[i]:ends[i]
dat[hits, j] <-
round(rnorm(n=length(hits), mean=(means[j]+seps[i]), sd=(means[j]/7)),digits=1)
}
}
fit <- prcomp(dat[,1:10])
plot(fit$x[,2]~fit$x[,1], col=c(rep("red", 50),
rep("blue", 73),
rep("green", 67),
rep("black", 10)))
plot(fit$x[,2]~fit$x[,1], col=c(rep("red", 50),
rep("blue", 73),
rep("green", 67),
rep("black", 10)))
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/teaching/expdes")
write.csv(dat, row.names=F,file="amphibia.csv")
setwd("~/Desktop")
dat <- read.csv("Book1.csv")
View(dat)
dat <- read.csv("Book1.csv", as.is=T)
View(dat)
dat <- read.csv("Book1.csv", as.is=T)
View(dat)
dat <- read.csv("Book1.csv", as.is=T, row.names = 1)
View(dat)
sp2 <- rowSums(dat)
sp1 <- colSums(dat)
prob <- sp1/sum(sp1)
results <- list()
prob <- sp1/sum(sp1)
for(i in 1:1000){
cur.table <- dat
cur.table[1:4,1:6] <- 0
for(j in 1:4){
cur.table[j, 1:6] <- sample(1:6, size = sp2[j], replace=T, prob=prob)
}
result[[i]] <- cur.table
}
sample(1:6, size = sp2[j], replace=T, prob=prob)
table(sample(1:6, size = sp2[j], replace=T, prob=prob))
results <- list()
prob <- sp1/sum(sp1)
for(i in 1:1000){
cur.table <- dat
cur.table[1:4,1:6] <- 0
for(j in 1:4){
x <- table(sample(1:6, size = sp2[j], replace=T, prob=prob))
cur.table[j, 1:6] <- x
}
result[[i]] <- cur.table
}
results <- list()
prob <- sp1/sum(sp1)
for(i in 1:1000){
cur.table <- dat
cur.table[1:4,1:6] <- 0
for(j in 1:4){
x <- table(sample(1:6, size = sp2[j], replace=T, prob=prob))
cur.table[j, 1:6] <- x
}
results[[i]] <- cur.table
}
getpval <- function(tab, row, col, obs){
counts <-c()
for(i in length(tab)){
counts[i] <- tab[[i]][row,col]
}
pval <- sum(counts > obs)/length(tab)
return(pval)
}
pvals <- dat
for(i in 1:4){
for(j in 1:6){
cur.obs <- dat[i, j]
x <- getpval(tab = results,
row = i,
col = j,
obs = cur.obs)
pvals[i,j] <-x
}
}
View(pvals)
getpval(tab = results,
row = i,
col = j,
obs = cur.obs)
tab = results
row = i
col = j
obs = cur.obs
counts <-c()
for(i in length(tab)){
counts[i] <- tab[[i]][row,col]
}
i <- 1
tab[[i]]
tab[[i]][row,col]
counts <-c()
for(i in length(tab)){
counts[i] <- tab[[i]][row,col]
}
counts <-c()
i <- 1
counts[i] <- tab[[i]][row,col]
i <- 2
tab[[i]][row,col]
counts[i] <- tab[[i]][row,col]
getpval <- function(tab, row, col, obs){
counts <-c()
for(i in 1:length(tab)){
counts[i] <- tab[[i]][row,col]
}
pval <- sum(counts > obs)/length(tab)
return(pval)
}
pvals <- dat
for(i in 1:4){
for(j in 1:6){
cur.obs <- dat[i, j]
x <- getpval(tab = results,
row = i,
col = j,
obs = cur.obs)
pvals[i,j] <-x
}
}
View(pvals)
dat <- matrix(NA, 2,3)
colnames(dat) <- paste("LG", 1:3)
row.names(dat) <- paste("LG", 1:2)
View(dat)
dat[1,1:3] <- c(50,2,2)
dat[2,1:3] <- c(2,34,56)
View(dat)
View(dat)
sample(1:3, size=54, replace=T)
table(sample(1:3, size=54, replace=T))
colSums(dat)
colSums(dat)/sum(dat)
dat[1,1:3] <- c(500,2,2)
dat[2,1:3] <- c(2,34,56)
View(dat)
dat[1,1:3] <- c(50,2,2)
table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
View(dat)
x <- table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
x <- as.data.frame(table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
}
x <- as.data.frame(table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
}
x <- as.data.frame(table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat))))
View(x)
sim.dat <- dat
sim.dat[1:2,1:3] <- 0
View(sim.dat)
sim.dat <- 0
sim.dat <- dat
sim.dat[1:2,1:3] <- 0
View(sim.dat)
sim.dat <- dat
View(dat)
View(sim.dat)
sim.dat[1,] <- x$Freq
View(sim.dat)
sim.dat <- dat
sim.dat[1:2,1:3] <- 0
x <- as.data.frame(table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat))))
sim.dat[1,] <- x$Freq
View(sim.dat)
View(x)
View(dat)
x <- as.data.frame(table(sample(1:3,
size=92,
replace=T,
prob=colSums(dat)/sum(dat))))
sim.dat[2,] <- x$Freq
View(x)
View(sim.dat)
result <- list()
for(i in 1:1000){
sim.dat <- dat
sim.dat[1:2,1:3] <- 0
x <- as.data.frame(table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat))))
sim.dat[1,] <- x$Freq
x <- as.data.frame(table(sample(1:3,
size=92,
replace=T,
prob=colSums(dat)/sum(dat))))
sim.dat[2,] <- x$Freq
result[[i]] <- sim.dat
}
View(dat)
View(dat)
obs <- 50
View(dat)
row <- 1
col <- 1
i <- 1
result[[i]][row, col]
result[[i]][row, col] >= obs
presult <- c()
for(i in 1:length(result)){
presult[i] <- result[[i]][row, col] >= obs
}
getPval <- function(result, obs, row, col){
presult <- c()
for(i in 1:length(result)){
presult[i] <- result[[i]][row, col] >= obs
}
pval <- sum(presult)/length(result)
return(pval)
}
dat <- matrix(NA, 2,3)
colnames(dat) <- paste("LG", 1:3)
row.names(dat) <- paste("LG", 1:2)
dat[1,1:3] <- c(50,2,2)
dat[2,1:3] <- c(2,34,56)
result <- list()
for(i in 1:1000){
sim.dat <- dat
sim.dat[1:2,1:3] <- 0
x <- as.data.frame(table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat))))
sim.dat[1,] <- x$Freq
x <- as.data.frame(table(sample(1:3,
size=92,
replace=T,
prob=colSums(dat)/sum(dat))))
sim.dat[2,] <- x$Freq
result[[i]] <- sim.dat
}
rm(sim.dat, x, i)
View(dat)
getPval(result=result,
obs=dat[1,1],
row=1,
col=1)
getPval(result=result,
obs=20,
row=1,
col=1)
getPval(result=result,
obs=30,
row=1,
col=1)
pval.mat <- dat
pval.mat[1:2,1:3] <- 0
View(pval.mat)
pval.mat <- dat
pval.mat[1:2,1:3] <- 0
for(i in 1:2){
for(j in 1:3){
pval.mat[i,j] <- getPval(result=result,
obs=dat[i,j],
row=i,
col=j)
}
View(pval.mat)
pval.mat <- dat
pval.mat[1:2,1:3] <- 0
for(i in 1:2){
for(j in 1:3){
pval.mat[i,j] <- getPval(result=result,
obs=dat[i,j],
row=i,
col=j)
}
}
View(pval.mat)
dat <- matrix(NA, 2,3)
colnames(dat) <- paste("LG", 1:3)
row.names(dat) <- paste("LG", 1:2)
dat[1,1:3] <- c(50,2,2)
dat[2,1:3] <- c(2,34,56)
View(dat)
sim.dat <- dat
sim.dat[1:2,1:3] <- 0
View(sim.dat)
View(dat)
colSums(dat)/sum(dat)
dat[1,1:3] <- c(5000,2,2)
dat[2,1:3] <- c(200,34,56)
View(dat)
colSums(dat)/sum(dat)
View(dat)
dat[1,1:3] <- c(50,2,2)
dat[2,1:3] <- c(2,34,56)
View(dat)
View(dat)
sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat))
table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat)))
as.data.frame(table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat))))
x <- as.data.frame(table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat))))
sim.dat[1,] <- x$Freq
View(sim.dat)
View(dat)
x <- as.data.frame(table(sample(1:3,
size=92,
replace=T,
prob=colSums(dat)/sum(dat))))
sim.dat[2,] <- x$Freq
View(sim.dat)
result[[i]] <- sim.dat
result <- list()
# we want to do a Monte Carlo where we repeat
# our experiment 1000
for(i in 1:1000){
sim.dat <- dat
sim.dat[1:2,1:3] <- 0
x <- as.data.frame(table(sample(1:3,
size=54,
replace=T,
prob=colSums(dat)/sum(dat))))
sim.dat[1,] <- x$Freq
x <- as.data.frame(table(sample(1:3,
size=92,
replace=T,
prob=colSums(dat)/sum(dat))))
sim.dat[2,] <- x$Freq
result[[i]] <- sim.dat
}
rm(sim.dat, x, i)
getPval <- function(result, obs, row, col){
presult <- c()
for(i in 1:length(result)){
presult[i] <- result[[i]][row, col] >= obs
}
pval <- sum(presult)/length(result)
return(pval)
}
pval.mat <- dat
pval.mat[1:2,1:3] <- 0
for(i in 1:2){
for(j in 1:3){
pval.mat[i,j] <- getPval(result=result,
obs=dat[i,j],
row=i,
col=j)
}
}
View(pval.mat)
setwd("~/Desktop/Dropbox/gitrepos/holocentric/data")
setwd("~/Desktop/Dropbox/gitrepos/holocentric/data")
dat <- read.csv("data.invert.csv")
View(dat)
leps <- dat[dat$Order=="Lepidoptera",]
hist(leps$haploid.num)
table(leps$haploid.num)
haps <- as.data.frame(table(leps$haploid.num))
View(haps)
haps==298
haps$Freq==298
leps$haploid.num==298
sum(leps$haploid.num==298)
sum(leps$haploid.num==31)
sum(leps$haploid.num==31)/length(leps$haploid.num)
leps <- dat[dat$Order=="Diptera",]
haps <- as.data.frame(table(leps$haploid.num))
View(haps)
sum(leps$haploid.num==6)/length(leps$haploid.num)
