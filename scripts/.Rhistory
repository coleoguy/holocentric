com.male <- runSim(males = 182, females = 14,
s = .3, iter = 100,
gens = 1000, cores = 14)
com.fema <- runSim(males = 14, females = 182,
s = .3, iter = 100,
gens = 1000, cores = 14)
com.equa <- runSim(males = 26, females = 26,
s = .3, iter = 100,
gens = 1000, cores = 14)
plot(colMeans(com.equa), type="l", col="green")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.male), col="blue")
com.male <- runSim(males = 182, females = 14,
s = .3, iter = 1000,
gens = 1000, cores = 14)
com.fema <- runSim(males = 14, females = 182,
s = .3, iter = 1000,
gens = 1000, cores = 14)
com.equa <- runSim(males = 26, females = 26,
s = .3, iter = 1000,
gens = 1000, cores = 14)
plot(colMeans(com.equa), type="l", col="green")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.male), col="blue")
# fate of sex limited deleterious mutations
# common sex: 50, 100, 500, 1000
# OSR: 0.2, 0.1
# s: 0.01, 0.05, 0.1
library(doMC)
library(evobiR)
source("../functions/functions.sex.lim.faster.R")
com.male <- runSim(males = 182, females = 14,
s = .3, iter = 5000,
gens = 1000, cores = 14)
com.fema <- runSim(males = 14, females = 182,
s = .3, iter = 5000,
gens = 1000, cores = 14)
com.equa <- runSim(males = 26, females = 26,
s = .3, iter = 5000,
gens = 1000, cores = 14)
plot(colMeans(com.equa), type="l", col="green")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.male), col="blue")
# fate of sex limited deleterious mutations
# common sex: 50, 100, 500, 1000
# OSR: 0.2, 0.1
# s: 0.01, 0.05, 0.1
library(doMC)
library(evobiR)
source("../functions/functions.sex.lim.faster.R")
iter <- 10000
gens <- 400
cores <- 14
com.male <- runSim(males = 182, females = 14,
s = .3, iter = iter,
gens = gens, cores = cores)
com.fema <- runSim(males = 14, females = 182,
s = .3, iter = iter,
gens = gens, cores = 14)
com.equa <- runSim(males = 26, females = 26,
s = .3, iter = iter,
gens = gens, cores = cores)
plot(colMeans(com.equa), type="l", col="green")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.male), col="blue")
getNe(males=500, females=10)
getNe(males=20, females=21)
getNe(males=20, females=20)
getNe(males=19, females=20)
getNe(males=400:600, females=10)
getNe(males=400:600, females=11)
getNe(males=473, females=11)
getNe(males=400:600, females=10)
getNe(males=400:600, females=12)
getNe(males=400:600, females=11)
range(getNe(males=400:600, females=11))
range(getNe(males=400:600, females=10))
range(getNe(males=400:600, females=12))
range(getNe(males=400:600, females=13))
range(getNe(males=400:700, females=13))
range(getNe(males=400:700, females=12))
range(getNe(males=400:700, females=11))
range(getNe(males=400:700, females=10))
10/400
range(getNe(males=400:700, females=10:20))
range(getNe(males=400:700, females=15))
getNe(males=400:700, females=15)
getNe(males=436, females=15)
getNe(males=435, females=15)
435/15
15/435
# fate of sex limited deleterious mutations
# common sex: 50, 100, 500, 1000
# OSR: 0.2, 0.1
# s: 0.01, 0.05, 0.1
library(doMC)
library(evobiR)
source("../functions/functions.sex.lim.faster.R")
iter <- 500
gens <- 1000
cores <- 14
getNe(males=435, females=15)
getNe(males=29, females=29)
com.male <- runSim(males = 435, females = 15,
s = .5, iter = iter,
gens = gens, cores = cores)
com.fema <- runSim(males = 15, females = 435,
s = .5, iter = iter,
gens = gens, cores = 14)
com.equa <- runSim(males = 29, females = 29,
s = .5, iter = iter,
gens = gens, cores = cores)
plot(colMeans(com.equa), type="l", col="green")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.male), col="blue")
com.male <- runSim(males = 500, females = 5,
s = .5, iter = iter,
gens = gens, cores = cores)
com.fema <- runSim(males = 5, females = 500,
s = .5, iter = iter,
gens = gens, cores = 14)
plot(colMeans(com.male), col="blue", type="l", col="green")
plot(colMeans(com.male), col="blue", type="l")
lines(colMeans(com.fema), col="red")
plot(colMeans(com.male), col="blue", type="l")
lines(colMeans(com.fema), col="red")
plot(colMeans(com.male), col="blue", type="l")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.equa), type="l", col="green")
getNe(males=500, females=5)
getNe(males=20, females=20)
getNe(males=10, females=11)
getNe(males=10, females=10)
45*.01
1/20
# males 500 females 5 produces fixation in both but much higer in males
getNe(males=500, females=5)
getNe(males=10, females=10)
library(doMC)
library(evobiR)
source("../functions/functions.sex.lim.faster.R")
iter <- 5000
gens <- 1000
cores <- 14
# males 500 females 5 produces fixation in both but much higer in males
getNe(males=500, females=5)
getNe(males=10, females=10)
com.male <- runSim(males = 500, females = 5,
s = .5, iter = iter,
gens = gens, cores = cores)
com.fema <- runSim(males = 5, females = 500,
s = .5, iter = iter,
gens = gens, cores = 14)
com.equa <- runSim(males = 10, females = 10,
s = .5, iter = iter,
gens = gens, cores = cores)
plot(colMeans(com.male), col="blue", type="l")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.equa), type="l", col="green")
library(doMC)
library(evobiR)
source("../functions/functions.sex.lim.faster.R")
iter <- 10000
gens <- 1000
cores <- 14
# males 500 females 5 produces fixation in both but much higher in males
getNe(males=500, females=5)
getNe(males=10, females=10)
com.male <- runSim(males = 500, females = 5,
s = .5, iter = iter,
gens = gens, cores = cores)
com.fema <- runSim(males = 5, females = 500,
s = .5, iter = iter,
gens = gens, cores = 14)
com.equa <- runSim(males = 10, females = 10,
s = .5, iter = iter,
gens = gens, cores = cores)
plot(colMeans(com.male), col="blue", type="l")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.equa), type="l", col="green")
library(doMC)
library(evobiR)
source("../functions/functions.sex.lim.faster.R")
iter <- 1000
gens <- 500
cores <- 14
s <- .3
# s .5 males 500 females 5 produces fixation in both but much higher in males
getNe(males=500, females=5)
getNe(males=10, females=10)
com.male <- runSim(males = 500, females = 5,
s = s, iter = iter,
gens = gens, cores = cores)
com.fema <- runSim(males = 5, females = 500,
s = s, iter = iter,
gens = gens, cores = 14)
com.equa <- runSim(males = 10, females = 10,
s = s, iter = iter,
gens = gens, cores = cores)
plot(colMeans(com.male), col="blue", type="l")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.equa), type="l", col="green")
library(doMC)
library(evobiR)
source("../functions/functions.sex.lim.faster.R")
iter <- 10000
gens <- 1000
cores <- 14
s <- .3
# s .5 males 500 females 5 produces fixation in both but much higher in males
# s=.5 equal males
# s=.3 females
getNe(males=500, females=5)
getNe(males=10, females=10)
com.male <- runSim(males = 500, females = 5,
s = s, iter = iter,
gens = gens, cores = cores)
com.fema <- runSim(males = 5, females = 500,
s = s, iter = iter,
gens = gens, cores = 14)
com.equa <- runSim(males = 10, females = 10,
s = s, iter = iter,
gens = gens, cores = cores)
plot(colMeans(com.male), col="blue", type="l")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.equa), type="l", col="green")
library(doMC)
library(evobiR)
source("../functions/functions.sex.lim.faster.R")
iter <- 20000
gens <- 1000
cores <- 14
s <- .3
# s .5 males 500 females 5 produces fixation in both but much higher in males
# s=.5 equal males
# s=.3 females
getNe(males=500, females=5)
getNe(males=10, females=10)
com.male <- runSim(males = 500, females = 5,
s = s, iter = iter,
gens = gens, cores = cores)
com.fema <- runSim(males = 5, females = 500,
s = s, iter = iter,
gens = gens, cores = 14)
com.equa <- runSim(males = 10, females = 10,
s = s, iter = iter,
gens = gens, cores = cores)
plot(colMeans(com.male), col="blue", type="l")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.equa), type="l", col="green")
run1 <- list(com.male, com.fema, com.equa)
# fate of sex limited deleterious mutations
# common sex: 50, 100, 500, 1000
# OSR: 0.2, 0.1
# s: 0.01, 0.05, 0.1
library(doMC)
library(evobiR)
source("../functions/functions.sex.lim.faster.R")
iter <- 20000
gens <- 1000
cores <- 14
s <- .3
# s .5 males 500 females 5 produces fixation in both but much higher in males
# s=.5 equal males
# s=.3 females
getNe(males=500, females=5)
getNe(males=10, females=10)
com.male <- runSim(males = 500, females = 5,
s = s, iter = iter,
gens = gens, cores = cores)
com.fema <- runSim(males = 5, females = 500,
s = s, iter = iter,
gens = gens, cores = 14)
com.equa <- runSim(males = 10, females = 10,
s = s, iter = iter,
gens = gens, cores = cores)
plot(colMeans(com.male), col="blue", type="l")
lines(colMeans(com.fema), col="red")
lines(colMeans(com.equa), type="l", col="green")
plot(colMeans(rbind(com.male,run1[[1]]), col="blue", type="l")
plot(colMeans(rbind(com.male,run1[[1]])), col="blue", type="l")
lines(colMeans(rbind(com.fema,run1[[2]])), col="red")
lines(colMeans(rbind(com.equa,run1[[3]])), type="l", col="green")
plot(colMeans(rbind(com.male,run1[[1]])), col="blue", type="l",
main=paste(s,"mal=500.fem=5"))
lines(colMeans(rbind(com.fema,run1[[2]])), col="red")
lines(colMeans(rbind(com.equa,run1[[3]])), type="l", col="green")
plot(colMeans(rbind(com.male,run1[[1]])), col="blue", type="l",
main=paste(s,"mal=500.fem=5"),ylab="freq",xlab="gen")
lines(colMeans(rbind(com.fema,run1[[2]])), col="red")
lines(colMeans(rbind(com.equa,run1[[3]])), type="l", col="green")
library(doMC)
library(evobiR)
source("../functions/functions.sex.lim.faster.R")
iter <- 20000
gens <- 1000
cores <- 14
s <- .5
# s .5 males 500 females 5 produces fixation in both but much higher in males
# s=.5 equal males
# s=.3 females
getNe(males=500, females=5)
getNe(males=10, females=10)
com.male <- runSim(males = 500, females = 5,
s = s, iter = iter,
gens = gens, cores = cores)
com.fema <- runSim(males = 5, females = 500,
s = s, iter = iter,
gens = gens, cores = 14)
com.equa <- runSim(males = 10, females = 10,
s = s, iter = iter,
gens = gens, cores = cores)
run1 <- list(com.male, com.fema, com.equa)
plot(colMeans(rbind(com.male,run1[[1]])), col="blue", type="l",
main=paste(s,"mal=500.fem=5"),ylab="freq",xlab="gen")
lines(colMeans(rbind(com.fema,run1[[2]])), col="red")
lines(colMeans(rbind(com.equa,run1[[3]])), type="l", col="green")
# fate of sex limited deleterious mutations
# common sex: 50, 100, 500, 1000
# OSR: 0.2, 0.1
# s: 0.01, 0.05, 0.1
library(doMC)
library(evobiR)
source("../functions/functions.sex.lim.faster.R")
iter <- 20000
gens <- 1000
cores <- 14
s <- .5
# s .5 males 500 females 5 produces fixation in both but much higher in males
# s=.5 equal males
# s=.3 females
getNe(males=500, females=5)
getNe(males=10, females=10)
com.male <- runSim(males = 500, females = 5,
s = s, iter = iter,
gens = gens, cores = cores)
com.fema <- runSim(males = 5, females = 500,
s = s, iter = iter,
gens = gens, cores = 14)
com.equa <- runSim(males = 10, females = 10,
s = s, iter = iter,
gens = gens, cores = cores)
#run1 <- list(com.male, com.fema, com.equa)
plot(colMeans(com.male,run1[[1]]), col="blue", type="l",
main=paste(s,"mal=500.fem=5"),ylab="freq",xlab="gen")
lines(colMeans(com.fema,run1[[2]]), col="red")
lines(colMeans(com.equa,run1[[3]]), type="l", col="green")
x <- runif(min=1, max=100, n=10000)
hist(x)
x <- runif(min=0, max=100, n=10000)
hist(x)
x <- runif(min=0, max=100, n=1000000)
hist(x)
hist(rnorm(n=10000, mean=2,sd=.01))
hist(rnorm(n=10000, mean=2,sd=.01), xlim=c(1,3))
hist(rnorm(n=10000, mean=2,sd=.1), xlim=c(1,3))
hist(rnorm(n=10000, mean=2,sd=.2), xlim=c(1,3))
hist(rnorm(n=10000, mean=2.5,sd=.2), xlim=c(1,3))
#hist(rnorm(n=10000, mean=2.5,sd=.2), xlim=c(1,3))
y <- rnorm(n=100, mean=x, sd=20)
x <- runif(min=0, max=100, n=1000000)
#hist(rnorm(n=10000, mean=2.5,sd=.2), xlim=c(1,3))
y <- rnorm(n=100, mean=x, sd=20)
fit <- lm(y~x)
x <- runif(min=0, max=100, n=100)
#hist(rnorm(n=10000, mean=2.5,sd=.2), xlim=c(1,3))
y <- rnorm(n=100, mean=x, sd=20)
fit <- lm(y~x)
fit$residuals
hist(fit$residuals)
x <- runif(min=0, max=100, n=1000)
#hist(rnorm(n=10000, mean=2.5,sd=.2), xlim=c(1,3))
y <- rnorm(n=1000, mean=x, sd=20)
fit <- lm(y~x)
hist(fit$residuals)
names(fit)
fit$coefficients
summary(fit)
fit <- glm(y~x)
hist(fit$residuals)
setwd("~/Desktop/Dropbox/gitrepos/holocentric/scripts")
library(ggraptR)
library(ggplot2)
load(file="../results/munged.data.RData")
#Plot of results without polyploidy
ggplot(results.wop, aes(y=rate, x=as.factor(type))) +
geom_boxplot(aes(fill=as.factor(order)), stat="boxplot",
alpha=0.5, width=0.2, position=position_dodge(0.5)) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000",
size=15, hjust=0.5, vjust=0.5),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
guides(fill=guide_legend(title="Order")) +
xlab("Type of Rearrangement") + ylab("Rate")
#Plot of results without polyploidy
ggplot(results.wop, aes(y=rate, x=as.factor(type))) +
geom_boxplot(aes(fill=as.factor(order)), stat="boxplot",
alpha=0.5, width=0.2, position=position_dodge(0.1)) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000",
size=15, hjust=0.5, vjust=0.5),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
guides(fill=guide_legend(title="Order")) +
xlab("Type of Rearrangement") + ylab("Rate")
#Plot of results without polyploidy
ggplot(results.wop, aes(y=rate, x=as.factor(type))) +
geom_boxplot(aes(fill=as.factor(order)), stat="boxplot",
alpha=0.5, width=0.2, position=position_dodge(0.8)) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000",
size=15, hjust=0.5, vjust=0.5),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
guides(fill=guide_legend(title="Order")) +
xlab("Type of Rearrangement") + ylab("Rate")
#Plot of results without polyploidy
ggplot(results.wop, aes(y=rate, x=as.factor(type))) +
geom_boxplot(aes(fill=as.factor(order)), stat="boxplot",
alpha=0.5, width=0.2, position=position_dodge(0.7)) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000",
size=15, hjust=0.5, vjust=0.5),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
guides(fill=guide_legend(title="Order")) +
xlab("Type of Rearrangement") + ylab("Rate")
#Plot of results without polyploidy
ggplot(results.wop, aes(y=rate, x=as.factor(type))) +
geom_boxplot(aes(fill=as.factor(order)), stat="boxplot",
alpha=0.5, width=0.4, position=position_dodge(0.7)) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000",
size=15, hjust=0.5, vjust=0.5),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
guides(fill=guide_legend(title="Order")) +
xlab("Type of Rearrangement") + ylab("Rate")
x = factor(sample(letters[1:5],100, replace=TRUE))
print(levels(x))  ## This will show the levels of x are "Levels: a b c d e"
## To reorder the levels:
## note, if x is not a factor use levels(factor(x))
x = factor(x,levels(x)[c(4,5,1:3)])
print(levels(x))
results.wop$order
unique(results.wop$order)
levels(results.wop$order)
factor(results.wop$order, levels(results.wop$order)[c(4, 7, 9, 1:3, 5, 6, 8, 10])
factor(results.wop$order, levels(results.wop$order)[c(4, 7, 9, 1:3, 5, 6, 8, 10)])
#Plot of results without polyploidy
ggplot(results.wop, aes(y=rate, x=as.factor(type))) +
geom_boxplot(aes(fill=as.factor(order)), stat="boxplot",
alpha=0.5, width=0.4, position=position_dodge(0.7)) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000",
size=15, hjust=0.5, vjust=0.5),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
guides(fill=guide_legend(title="Order")) +
xlab("Type of Rearrangement") + ylab("Rate")
levels(results.wop$order)
results.wop$order <- factor(results.wop$order, levels(results.wop$order)[c(4, 7, 9, 1:3, 5, 6, 8, 10)])
levels(results.wop$order)
#Plot of results without polyploidy
ggplot(results.wop, aes(y=rate, x=as.factor(type))) +
geom_boxplot(aes(fill=as.factor(order)), stat="boxplot",
alpha=0.5, width=0.4, position=position_dodge(0.7)) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000",
size=15, hjust=0.5, vjust=0.5),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
guides(fill=guide_legend(title="Order")) +
xlab("Type of Rearrangement") + ylab("Rate")
# export at 7"x3.5"
#Plot of results with polyploidy
ggplot(results.wp, aes(y=rate, x=as.factor(type))) +
geom_boxplot(aes(fill=as.factor(order)), stat="boxplot",
alpha=0.5, width=0.2, position=position_dodge(0.5)) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000",
size=15, hjust=0.5, vjust=0.5),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
guides(fill=guide_legend(title="Order")) +
xlab("Type of Rearrangement") + ylab("Rate")
# export at 7"x3.5"
#Plot of results with polyploidy
ggplot(results.wp, aes(y=rate, x=as.factor(type))) +
geom_boxplot(aes(fill=as.factor(order)), stat="boxplot",
alpha=0.5, width=0.4, position=position_dodge(0.7)) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000",
size=15, hjust=0.5, vjust=0.5),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
guides(fill=guide_legend(title="Order")) +
xlab("Type of Rearrangement") + ylab("Rate")
results.wp$order <- factor(results.wp$order, levels(results.wp$order)[c(4, 7, 9, 1:3, 5, 6, 8, 10)])
# export at 7"x3.5"
#Plot of results with polyploidy
ggplot(results.wp, aes(y=rate, x=as.factor(type))) +
geom_boxplot(aes(fill=as.factor(order)), stat="boxplot",
alpha=0.5, width=0.4, position=position_dodge(0.7)) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000",
size=15, hjust=0.5, vjust=0.5),
panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
guides(fill=guide_legend(title="Order")) +
xlab("Type of Rearrangement") + ylab("Rate")
