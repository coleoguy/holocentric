sig.count <- sig.count + 1
}
}
library(coda)
for(i in 1:1000){
sel.trees <- sample(1:100, replace=T)
sel.rows <- as.vector(treerows[,sel.trees])
if(HPDinterval(as.mcmc(rates$asc1[sel.rows]))[2] <
HPDinterval(as.mcmc(rates$asc2[sel.rows]))[1]){
sig.count <- sig.count + 1
}
}
load("~/Documents/GitHub/holocentric/results/cent.rates-backbone2.RData")
starts <- seq(from=1, by=25, length.out = 100)
ends <- seq(from=25, by=25, length.out = 100)
treerows <- matrix(, 25, 100)
for(i in 1:100){
treerows[,i] <- starts[i]:ends[i]
}
sig.count <- 0
library(coda)
for(i in 1:1000){
sel.trees <- sample(1:100, replace=T)
sel.rows <- as.vector(treerows[,sel.trees])
if(HPDinterval(as.mcmc(f.results$asc1[sel.rows]))[2] <
HPDinterval(as.mcmc(f.results$asc2[sel.rows]))[1]){
sig.count <- sig.count + 1
}
}
load("~/Documents/GitHub/holocentric/results/cent.rates-backbone1.RData")
starts <- seq(from=1, by=25, length.out = 100)
ends <- seq(from=25, by=25, length.out = 100)
treerows <- matrix(, 25, 100)
for(i in 1:100){
treerows[,i] <- starts[i]:ends[i]
}
sig.count <- 0
library(coda)
for(i in 1:1000){
sel.trees <- sample(1:100, replace=T)
sel.rows <- as.vector(treerows[,sel.trees])
if(HPDinterval(as.mcmc(f.results$asc1[sel.rows]))[2] <
HPDinterval(as.mcmc(f.results$asc2[sel.rows]))[1]){
sig.count <- sig.count + 1
}
}
plot(rates$asc1~rates$asc2, pch=16, cex=.3)
summary(lm(rates$asc1~rates$asc2))
abline(v=starts, col="red", lwd=.3)
HPDinterval(as.mcmc(rates$asc1[1:25]))
HPDinterval(as.mcmc(rates$asc2[1:25]))
load("~/Documents/GitHub/holocentric/results/cent.rates-backbone1.RData")
starts <- seq(from=1, by=25, length.out = 100)
ends <- seq(from=25, by=25, length.out = 100)
treerows <- matrix(, 25, 100)
for(i in 1:100){
treerows[,i] <- starts[i]:ends[i]
}
sig.count <- 0
library(coda)
vdr <- c()
colMeans(rates)
mean?
vdr <- c()
for(i in 1:1000){
sel.trees <- sample(1:100, replace=T)
sel.rows <- as.vector(treerows[,sel.trees])
if(HPDinterval(as.mcmc(rates$asc1[sel.rows]))[2] <
HPDinterval(as.mcmc(rates$asc2[sel.rows]))[1]){
sig.count <- sig.count + 1
}
vdr[i] <- mean(rates$asc1[sel.rows] - rates$asc2[sel.rows])
}
hist(vdr)
dists <- list()
for(i in 1:1000){
sel.trees <- sample(1:100, replace=T)
sel.rows <- as.vector(treerows[,sel.trees])
if(HPDinterval(as.mcmc(rates$asc1[sel.rows]))[2] <
HPDinterval(as.mcmc(rates$asc2[sel.rows]))[1]){
sig.count <- sig.count + 1
}
dists[[i]] <- matrix(c(rates$asc1[sel.rows], rates$asc2[sel.rows]),
2500, 2)
}
plot(0,0,col="white",
ylim=c(-50,700),
xlim=c(-.02,.01),
xlab=expression(paste(Delta, R[x])),
ylab="density")
abline(v=0, lty=3,col="black")
rtemp <- dists[[i]][,1] + dists[[i]][,2]
polygon(density(rtemp, bw = .0005), col = cols[1])
cols <- rainbow(1000)
rtemp <- dists[[i]][,1] + dists[[i]][,2]
polygon(density(rtemp, bw = .0005), col = cols[1])
hist(rtemp)
plot(0,0,col="white",
ylim=c(-50,7),
xlim=c(-.05,.1),
xlab=expression(paste(Delta, R[x])),
ylab="density")
abline(v=0, lty=3,col="black")
cols <- rainbow(1000)
rtemp <- dists[[i]][,1] + dists[[i]][,2]
polygon(density(rtemp, bw = .0005), col = cols[1])
plot(0,0,col="white",
ylim=c(-5,70),
xlim=c(-.05,.1),
xlab=expression(paste(Delta, R[x])),
ylab="density")
abline(v=0, lty=3,col="black")
cols <- rainbow(1000)
rtemp <- dists[[i]][,1] + dists[[i]][,2]
polygon(density(rtemp, bw = .0005), col = cols[1])
plot(0,0,col="white",
ylim=c(-5,110),
xlim=c(-.05,.1),
xlab=expression(paste(Delta, R[x])),
ylab="density")
abline(v=0, lty=3,col="black")
cols <- rainbow(1000)
rtemp <- dists[[i]][,1] + dists[[i]][,2]
polygon(density(rtemp, bw = .0005), col = cols[1])
plot(0,0,col="white",
ylim=c(-5,110),
xlim=c(-.05,.1),
xlab=expression(paste(Delta, R[x])),
ylab="density")
abline(v=0, lty=3,col="black")
cols <- rainbow(1000)
rtemp <- dists[[i]][,1] + dists[[i]][,2]
lines(density(rtemp, bw = .0005), col = cols[1])
for(i in 1:1000){
rtemp <- dists[[i]][,1] + dists[[i]][,2]
lines(density(rtemp, bw = .0005), col = cols[1])}
install.packages("tidybayes")
setwd("~/Documents/GitHub/holocentric/scripts")
library(ggplot2)
library(tidybayes)
load(file="../results/order.rates.RData")
# get parameter names correct
foo <- as.character(results.wop$type)
foo[foo=="asc"] <- "fission"
foo[foo=="desc"] <- "fusion"
results.wop$type <- as.factor(foo)
foo <- as.character(results.wp$type)
foo[foo=="asc"] <- "fission"
foo[foo=="pol"] <- "polyploidy"
foo[foo=="desc"] <- "fusion"
results.wp$type <- as.factor(foo)
# lets figure out the order for the data
foo <- aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = mean)
foo <- foo[foo$Group.2=="fission",]
foo <- foo[order(foo$x, decreasing=T),]
x <- row.names(foo)[which(foo$Group.1 %in% c("Hemiptera","Lepidoptera","Odonata"))]
x <- c(x, row.names(foo)[which(!foo$Group.1 %in% c("Hemiptera","Lepidoptera","Odonata"))])
x <- as.numeric(x)
# reorder so taxa are in right order
results.wop$order <- factor(results.wop$order,
levels(results.wop$order)[x])
results.wp$order <- factor(results.wp$order,
levels(results.wp$order)[x])
# we used this code to just get a legend we dont actually use
# or care about the data plotted here
ggplot(results.wop, aes(x=type, y=rate, color=order)) +
geom_jitter(cex=2, alpha=1,position=position_jitterdodge(.3)) +
theme_bw()+
guides(color=guide_legend(title="Order"))
# this code is for plot wo polyploidy
ggplot(results.wop, aes(x = type, y = rate, color = order)) +
geom_jitter(cex = .5, alpha = .1,
position = position_jitterdodge(.3)) +
theme_bw() +
theme(legend.position = "none") +
xlab("Parameter") + ylab("Rate") +
stat_summary(aes(x = type, y = rate, fill = order),
fun.data = "mean_hdci", fun.args = list(mult=1),
size = 0.4, position = position_jitterdodge(0),
inherit.aes = FALSE) # exported 4x4
View(foo)
# this code is for plot w polyploidy
ggplot(results.wp, aes(x=type, y=rate, color=order)) +
geom_jitter(cex=.5, alpha=.1,position=position_jitterdodge(.3)) +
theme_bw()+
theme(legend.position = "none")+
xlab("Parameter") + ylab("Rate") +
stat_summary(aes(x=type, y=rate, fill=order), fun.data="mean_hdci", fun.args = list(mult=1),
size = 0.4, position = position_jitterdodge(0),
inherit.aes = FALSE) # exported 6x4
View(results.wop)
View(foo)
p.interval(results.wop)
install.packages("interval")
install.packages("LaplacesDemon")
p.interval(results.wop)
library(LaplacesDemon)
p.interval(results.wop)
p.interval(results.wop$order)
p.interval(results.wop$rate)
View(results.wop)
library(ggplot2)
library(tidybayes)
load(file="../results/order.rates.RData")
# get parameter names correct
foo <- as.character(results.wop$type)
foo[foo=="asc"] <- "fission"
foo[foo=="desc"] <- "fusion"
results.wop$type <- as.factor(foo)
foo <- as.character(results.wp$type)
foo[foo=="asc"] <- "fission"
foo[foo=="pol"] <- "polyploidy"
foo[foo=="desc"] <- "fusion"
results.wp$type <- as.factor(foo)
# lets figure out the order for the data
foo <- aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = mean)
View(foo)
aggregate?
?aggregate
aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type))
aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type), FUN=p.interval)
credible.wp <- aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = p.interval(prob=0.95))
p.interval(object=results.wop, prob=0.95)
p.interval(obj=results.wop, prob=0.95)
p.interval(obj=results.wop$rate, prob=0.95)
credible.wop <- aggregate(x = results.wp$rate,
by = list(results.wop$order, results.wop$type),
FUN = p.interval)
credible.wop <- aggregate(x = results.wop$rate,
by = list(results.wop$order, results.wop$type),
FUN = p.interval)
results.wp$order <- factor(results.wp$order,
levels(results.wp$order)[x])
# get parameter names correct
foo <- as.character(results.wop$type)
#assigns fission to ascending rates
foo[foo=="asc"] <- "fission"
#assigns fusion to descending rates
foo[foo=="desc"] <- "fusion"
#assigns type based on the vector foo which contains fission and fusions
results.wop$type <- as.factor(foo)
foo <- as.character(results.wp$type)
foo[foo=="asc"] <- "fission"
foo[foo=="pol"] <- "polyploidy"
foo[foo=="desc"] <- "fusion"
results.wp$type <- as.factor(foo)
# lets figure out the order for the data
foo <- aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = mean)
foo <- foo[foo$Group.2=="fission",]
foo <- foo[order(foo$x, decreasing=T),]
x <- row.names(foo)[which(foo$Group.1 %in% c("Hemiptera","Lepidoptera","Odonata"))]
x <- c(x, row.names(foo)[which(!foo$Group.1 %in% c("Hemiptera","Lepidoptera","Odonata"))])
x <- as.numeric(x)
# reorder so taxa are in right order
results.wop$order <- factor(results.wop$order,
levels(results.wop$order)[x])
results.wp$order <- factor(results.wp$order,
levels(results.wp$order)[x])
#credible intervals for wp
credible.wp <- aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = p.interval)
#credible intervals for wop
credible.wop <- aggregate(x = results.wop$rate,
by = list(results.wop$order, results.wop$type),
FUN = p.interval)
load(file="../results/order.rates.RData")
# get parameter names correct
foo <- as.character(results.wop$type)
#assigns fission to ascending rates
foo[foo=="asc"] <- "fission"
#assigns fusion to descending rates
foo[foo=="desc"] <- "fusion"
#assigns type based on the vector foo which contains fission and fusions
results.wop$type <- as.factor(foo)
foo <- as.character(results.wp$type)
foo[foo=="asc"] <- "fission"
foo[foo=="pol"] <- "polyploidy"
foo[foo=="desc"] <- "fusion"
results.wp$type <- as.factor(foo)
#credible intervals for wp
credible.wp <- aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = p.interval)
#credible intervals for wop
credible.wop <- aggregate(x = results.wop$rate,
by = list(results.wop$order, results.wop$type),
FUN = p.interval)
# lets figure out the order for the data
foo <- aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = mean)
View(foo)
View(credible.wop)
aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = p.interval)
aggregate(x = results.wop$rate,
by = list(results.wop$order, results.wop$type),
FUN = p.interval)
# this script makes the plot comparing delta R stats for
# monocentric and holocentric
par(mfcol=c(1,2))
load("../results/cent.rates-backbone1.RData")
library(coda)
fission <- rates$asc1-rates$asc2
fusion <- rates$desc1-rates$desc2
poly <- rates$pol1-rates$pol2
hpdfis <- HPDinterval(as.mcmc(fission))
hpdfus <- HPDinterval(as.mcmc(fusion))
hpdpol <- HPDinterval(as.mcmc(poly))
library(ggplot2)
library(tidybayes)
load(file="../results/order.rates.RData")
# get parameter names correct
foo <- as.character(results.wop$type)
#assigns fission to ascending rates
foo[foo=="asc"] <- "fission"
#assigns fusion to descending rates
foo[foo=="desc"] <- "fusion"
#assigns type based on the vector foo which contains fission and fusions
results.wop$type <- as.factor(foo)
foo <- as.character(results.wp$type)
foo[foo=="asc"] <- "fission"
foo[foo=="pol"] <- "polyploidy"
foo[foo=="desc"] <- "fusion"
results.wp$type <- as.factor(foo)
aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = HPDinterval
aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = HPDinterval)
library(coda)
aggregate(x = as.mcmc(results.wp$rate),
by = list(results.wp$order, results.wp$type),
FUN = HPDinterval)
library(phytools)
library(chromePlus)
library(viridis)
trees <- read.nexus("../data/misof.backbone.nex")
dat <- read.csv("../data/data.invert.csv", as.is=T)
View(dat)
table(order)
table(dat$Order)
source("functions.R")
foo <- getData2(trees, dat)
tree <- foo[[1]][[1]]
dat <- foo[[2]]
chrom.type <- dat$chrom
View(dat)
install.packages("doMC")
# load packages
library(ape) # basic phylo tools
library(chromePlus) # chromosome models
library(diversitree) # basic likelihood functions
library(doMC) # this allows multicore runs on a mac
# load custom functions
source("functions.R")
# read in the data and the tree
trees <- read.nexus("../data/misof.backbone.nex")
dat <- read.csv("../data/data.invert.csv", as.is = T)[, -c(6:9)]
# set the MCMC chain length
iter <- 50
View(dat)
dat <- read.csv("../data/data.invert.csv", as.is = T)
View(dat)
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
chroms <- foo[[2]]
View(chroms)
View(dat)
View(foo)
dat[dat$Genus %in% row.names(chroms), ] -> bar
View(bar)
table(bar$Order)
table(bar$Order)
table(dat$Order)
View(chroms)
source('~/.active-rstudio-document', echo=TRUE)
bar[bar$Genus %in% row.names(chroms), ] -> foobar
i <- 1
x <- unique(bar$Order)
counts <- c()
counts[i] <- length(unique(bar$Genus[bar$Order==x[i]]))
counts <- c()
for (i in 1:length(x)){
counts[i] <- length(unique(bar$Genus[bar$Order==x[i]]))
}
names(counts) <- x
counts
table(dat$chromosome)
table(bar$chromosome)
View(bar)
View(chroms)
gen <- unique(bar$Genus)
gen[1]
bar$chromosome[bar$Genus==gen[1]]
bar$chromosome[bar$Genus==gen[10]]
genchrom <- c()
for(i in 1:length(gen)){
genchrom[i] <- bar$chromosome[bar$Genus==gen[i]][1]
}
table(genchrom)
library(ggplot2)
library(tidybayes)
load(file="../results/order.rates.RData")
# get parameter names correct
foo <- as.character(results.wop$type)
#assigns fission to ascending rates
foo[foo=="asc"] <- "fission"
#assigns fusion to descending rates
foo[foo=="desc"] <- "fusion"
#assigns type based on the vector foo which contains fission and fusions
results.wop$type <- as.factor(foo)
foo <- as.character(results.wp$type)
foo[foo=="asc"] <- "fission"
foo[foo=="pol"] <- "polyploidy"
foo[foo=="desc"] <- "fusion"
results.wp$type <- as.factor(foo)
# lets figure out the order for the data
foo <- aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = mean)
View(foo)
round(x,4)
round(foo$x, 4)
write.csv(foo)
write.csv(foo, "ordermeans.wp.csv")
foo2 <- aggregate(x = results.wop$rate,
by = list(results.wop$order, results.wop$type),
FUN = mean)
View(foo2)
write.csv(foo2, "ordermeans.wop.csv")
aggregate(x = as.mcmc(results.wp$rate),
by = list(results.wp$order, results.wp$type),
FUN = p.interval)
aggregate(x = results.wp$rate,
by = list(results.wp$order, results.wp$type),
FUN = p.interval)
# this script makes the plot comparing delta R stats for
# monocentric and holocentric
par(mfcol=c(1,2))
load("../results/cent.rates-backbone1.RData")
library(coda)
fission <- rates$asc1-rates$asc2
fusion <- rates$desc1-rates$desc2
poly <- rates$pol1-rates$pol2
hpdfis <- HPDinterval(as.mcmc(fission))
hpdfus <- HPDinterval(as.mcmc(fusion))
hpdpol <- HPDinterval(as.mcmc(poly))
mean(as.mcmc(fusion))
mean(as.mcmc(fission))
mean(as.mcmc(polyploidy))
mean(as.mcmc(poly))
load("../results/cent.rates.simple.model.RData")
#rates must be back transformed into units of
# millions of years tree depth is 479.1039
rates[,2:7] <- rates[,2:7]/479.1039
library(coda)
fission <- rates$asc1-rates$asc2
fusion <- rates$desc1-rates$desc2
hpdfis <- HPDinterval(as.mcmc(fission))
hpdfus <- HPDinterval(as.mcmc(fusion))
mean(as.mcmc(fusion))
mean(as.mcmc(fission))
# this script makes the plot comparing delta R stats for
# monocentric and holocentric
par(mfcol=c(1,2))
load("../results/cent.rates-backbone1.RData")
View(rates)
HPDinterval(as.mcmc(rates$asc1))
HPDinterval(as.mcmc(rates$desc1))
HPDinterval(as.mcmc(rates$asc1))
HPDinterval(as.mcmc(rates$asc2))
HPDinterval(as.mcmc(rates$desc1))
HPDinterval(as.mcmc(rates$desc2))
HPDinterval(as.mcmc(rates$pol1))
HPDinterval(as.mcmc(rates$pol2))
colMeans(rates)
load("../results/cent.rates.simple.model.RData")
#state 1 = holocentric, state 2 = monocentric
HPDinterval(as.mcmc(rates$asc1))
HPDinterval(as.mcmc(rates$asc2))
HPDinterval(as.mcmc(rates$desc1))
HPDinterval(as.mcmc(rates$desc2))
HPDinterval(as.mcmc(rates$pol1))
HPDinterval(as.mcmc(rates$pol2))
load("../results/cent.rates.simple.model.RData")
#rates must be back transformed into units of
# millions of years tree depth is 479.1039
rates[,2:7] <- rates[,2:7]/479.1039
library(coda)
fission <- rates$asc1-rates$asc2
fusion <- rates$desc1-rates$desc2
#state 1 = holocentric, state 2 = monocentric
HPDinterval(as.mcmc(rates$asc1))
HPDinterval(as.mcmc(rates$asc2))
HPDinterval(as.mcmc(rates$desc1))
HPDinterval(as.mcmc(rates$desc2))
colMeans(rates)
