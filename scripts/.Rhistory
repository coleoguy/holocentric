chroms <- foo[[2]]
ncol(chroms)
rm(foo)
lk.mk <- make.mkn(trees.pruned[[1]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# we will do this next bit twice to get w with and without polyploidy
# first with polyploidy
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = T))
prior <- make.prior.exponential(.5)
temp.wop <- mcmc(con.lk.mk,
x.init = runif(6, 0, 1),
prior = prior,
w = 1,
nsteps = 20,
upper = 50,
lower = 0)
View(temp.wop)
temp.wop <- temp.wop[-c(1:10), ]
View(temp.wop)
w.wop <- diff(sapply(temp.wop[2:7],
quantile, c(.05, .95)))
# now with polyploidy
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
prior <- make.prior.exponential(.5)
temp.wp <- mcmc(con.lk.mk,
x.init = runif(8, 0, 1),
prior = prior,
w = 1,
nsteps = 20,
upper = 50,
lower = 0)
temp.wp <- temp.wp[-c(1:10), ]
w.wp <- diff(sapply(temp.wp[2:9],
quantile, c(.05, .95)))
#################################
#                               #
#  Now we can do our full run   #
#                               #
#################################
#iter <- 1 # just for testing
# this will allow us to run on 14 cores
registerDoMC(14)
result <- list()
# we will loop through all 100 trees
# fitting model without polyploidy
x <- foreach(i=1:100) %dopar%{
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = T))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(6, 0, 1),
prior = prior,
w = w.wop,
nsteps = iter,
upper = 50,
lower = 0)
# just in case we have a crash lets write results for each tree
write.csv(result[[i]], file=paste("/results/tree.nop",i,".csv", sep=""))
}
View(temp.wp)
i <- 1
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = T))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(6, 0, 1),
prior = prior,
w = w.wop,
nsteps = iter,
upper = 50,
lower = 0)
hist(results[[1]])
hist(result[[1]]$asc1)
hist(result[[1]]$asc1)
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# we will loop through all 100 trees
# fitting model with polyploidy
result <- list()
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
x <- list(result)
results->foo
result->foo
result[[1->foo
result[[1]]->foo
View(foo)
result <- list()
# we will loop through all 100 trees
x <- foreach(i=1:100) %dopar%{
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
# just in case we have a crash lets write results for each tree
write.csv(result[[i]], file=paste("/results/tree.p",i,".csv", sep=""))
}
results <- list()
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
i <- 2
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
i <- 3
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
i<-4
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
i <- 5
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
save.image("~/Desktop/i.is5.RData")
# we will loop through all 100 trees
# fitting model with polyploidy
result <- list()
# we will loop through all 100 trees
x <- foreach(i=6:7) %dopar%{
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
# just in case we have a crash lets write results for each tree
#write.csv(result[[i]], file=paste("/results/tree.p",i,".csv", sep=""))
}
ls()
ls()[-20]
results <- x
# we will loop through all 100 trees
x <- foreach(i=8:12) %dopar%{
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
# just in case we have a crash lets write results for each tree
#write.csv(result[[i]], file=paste("/results/tree.p",i,".csv", sep=""))
}
save.image("~/Desktop/i-8-12.RData")
# we will loop through all 100 trees
x <- foreach(i=13:23) %dopar%{
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
# just in case we have a crash lets write results for each tree
#write.csv(result[[i]], file=paste("/results/tree.p",i,".csv", sep=""))
}
# we will loop through all 100 trees
# fitting model with polyploidy
result <- list()
# we will loop through all 100 trees
x <- foreach(i=13:23) %dopar%{
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
# just in case we have a crash lets write results for each tree
#write.csv(result[[i]], file=paste("/results/tree.p",i,".csv", sep=""))
}
# we will loop through all 100 trees
x <- foreach(i=1:100) %dopar%{
# slim the data to include only the desired data
# and generate the format table needed by chromPlus
foo <- getData(trees, dat)
ncol(foo[[2]])
trees.pruned <- foo[[1]]
chroms <- foo[[2]]
rm(foo)
# make the basic likelihood function for the data
lk.mk <- make.mkn(trees.pruned[[i]], states = chroms,
k = ncol(chroms), strict = F,
control = list(method = "ode"))
# now we constrain our model to be biologically realistic for
# chromosomes.
con.lk.mk<-constrainMkn(data = chroms, lik = lk.mk, hyper = T,
polyploidy = F, verbose = F,
constrain = list(drop.demi = T, drop.poly = F))
# now we are ready to run our inference run
result[[i]] <- mcmc(con.lk.mk,
x.init =  runif(8, 0, 1),
prior = prior,
w = w.wp,
nsteps = iter,
upper = 50,
lower = 0)
# just in case we have a crash lets write results for each tree
#write.csv(result[[i]], file=paste("/results/tree.p",i,".csv", sep=""))
}
results <- list()
x->foo
results <- list()
for(i in 1:100){
scaler <- max(branching.times(trees.pruned[[i]]))
x[[i]][,2:9] <- x[[i]][,2:9]/scaler
results[[i]] <- x
}
bar <- foo[[1]]
bar2 <- results[[1]]
x <- foo
results <- list()
for(i in 1:100){
scaler <- max(branching.times(trees.pruned[[i]]))
x[[i]][,2:9] <- x[[i]][,2:9]/scaler
results[[i]] <- x[[i]]
}
bar <- foo[[1]]
bar2<-results[[1]]
View(bar)
View(bar2)
x <- foo
source('~/Desktop/Dropbox/gitrepos/holocentric/scripts/functions.R')
results <- list()
for(i in 1:100){
scaler <- max(branching.times(trees.pruned[[i]]))
x[[i]][,2:9] <- x[[i]][,2:9]/scaler
results[[i]] <- x[[i]]
}
bar <- results[[1]]
bar2 <- foo[[1]]
View(bar)
View(bar2)
depths <- getData(trees, dat)[[3]]
depths
max(branching.times(trees[[1]]))
foo -> x
results <- list()
depths <- getData(trees, dat)[[3]]
for(i in 1:100){
#scaler <- max(branching.times(trees.pruned[[i]]))
x[[i]][,2:9] <- x[[i]][,2:9]/depths
results[[i]] <- x[[i]]
}
bar <- results[[1]]
bar2 <- foo[[1]]
View(bar)
View(bar2)
ls()
ls()[-17]
save.image("~/Desktop/justincase.RData")
rm(list=ls()[-17])
save.image("~/Desktop/Dropbox/gitrepos/holocentric/results/centromere.rates.RData")
